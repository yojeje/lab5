// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectorClient is the client API for Director service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorClient interface {
	Preparacion(ctx context.Context, in *PreparacionRequest, opts ...grpc.CallOption) (*PreparacionResponse, error)
	EnviarDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	InformarEliminacion(ctx context.Context, in *EliminacionRequest, opts ...grpc.CallOption) (*EliminacionResponse, error)
}

type directorClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorClient(cc grpc.ClientConnInterface) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) Preparacion(ctx context.Context, in *PreparacionRequest, opts ...grpc.CallOption) (*PreparacionResponse, error) {
	out := new(PreparacionResponse)
	err := c.cc.Invoke(ctx, "/mission.Director/Preparacion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) EnviarDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, "/mission.Director/EnviarDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) InformarEliminacion(ctx context.Context, in *EliminacionRequest, opts ...grpc.CallOption) (*EliminacionResponse, error) {
	out := new(EliminacionResponse)
	err := c.cc.Invoke(ctx, "/mission.Director/InformarEliminacion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServer is the server API for Director service.
// All implementations must embed UnimplementedDirectorServer
// for forward compatibility
type DirectorServer interface {
	Preparacion(context.Context, *PreparacionRequest) (*PreparacionResponse, error)
	EnviarDecision(context.Context, *DecisionRequest) (*DecisionResponse, error)
	InformarEliminacion(context.Context, *EliminacionRequest) (*EliminacionResponse, error)
	mustEmbedUnimplementedDirectorServer()
}

// UnimplementedDirectorServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServer struct {
}

func (UnimplementedDirectorServer) Preparacion(context.Context, *PreparacionRequest) (*PreparacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preparacion not implemented")
}
func (UnimplementedDirectorServer) EnviarDecision(context.Context, *DecisionRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarDecision not implemented")
}
func (UnimplementedDirectorServer) InformarEliminacion(context.Context, *EliminacionRequest) (*EliminacionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarEliminacion not implemented")
}
func (UnimplementedDirectorServer) mustEmbedUnimplementedDirectorServer() {}

// UnsafeDirectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServer will
// result in compilation errors.
type UnsafeDirectorServer interface {
	mustEmbedUnimplementedDirectorServer()
}

func RegisterDirectorServer(s grpc.ServiceRegistrar, srv DirectorServer) {
	s.RegisterService(&Director_ServiceDesc, srv)
}

func _Director_Preparacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).Preparacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.Director/Preparacion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).Preparacion(ctx, req.(*PreparacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_EnviarDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).EnviarDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.Director/EnviarDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).EnviarDecision(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_InformarEliminacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EliminacionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).InformarEliminacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.Director/InformarEliminacion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).InformarEliminacion(ctx, req.(*EliminacionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Director_ServiceDesc is the grpc.ServiceDesc for Director service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Director_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preparacion",
			Handler:    _Director_Preparacion_Handler,
		},
		{
			MethodName: "EnviarDecision",
			Handler:    _Director_EnviarDecision_Handler,
		},
		{
			MethodName: "InformarEliminacion",
			Handler:    _Director_InformarEliminacion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mision.proto",
}

// DoshBankClient is the client API for DoshBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoshBankClient interface {
	RegistrarEliminacion(ctx context.Context, in *RegistroRequest, opts ...grpc.CallOption) (*RegistroResponse, error)
	ObtenerMonto(ctx context.Context, in *MontoRequest, opts ...grpc.CallOption) (*MontoResponse, error)
}

type doshBankClient struct {
	cc grpc.ClientConnInterface
}

func NewDoshBankClient(cc grpc.ClientConnInterface) DoshBankClient {
	return &doshBankClient{cc}
}

func (c *doshBankClient) RegistrarEliminacion(ctx context.Context, in *RegistroRequest, opts ...grpc.CallOption) (*RegistroResponse, error) {
	out := new(RegistroResponse)
	err := c.cc.Invoke(ctx, "/mission.DoshBank/RegistrarEliminacion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doshBankClient) ObtenerMonto(ctx context.Context, in *MontoRequest, opts ...grpc.CallOption) (*MontoResponse, error) {
	out := new(MontoResponse)
	err := c.cc.Invoke(ctx, "/mission.DoshBank/ObtenerMonto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoshBankServer is the server API for DoshBank service.
// All implementations must embed UnimplementedDoshBankServer
// for forward compatibility
type DoshBankServer interface {
	RegistrarEliminacion(context.Context, *RegistroRequest) (*RegistroResponse, error)
	ObtenerMonto(context.Context, *MontoRequest) (*MontoResponse, error)
	mustEmbedUnimplementedDoshBankServer()
}

// UnimplementedDoshBankServer must be embedded to have forward compatible implementations.
type UnimplementedDoshBankServer struct {
}

func (UnimplementedDoshBankServer) RegistrarEliminacion(context.Context, *RegistroRequest) (*RegistroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarEliminacion not implemented")
}
func (UnimplementedDoshBankServer) ObtenerMonto(context.Context, *MontoRequest) (*MontoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerMonto not implemented")
}
func (UnimplementedDoshBankServer) mustEmbedUnimplementedDoshBankServer() {}

// UnsafeDoshBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoshBankServer will
// result in compilation errors.
type UnsafeDoshBankServer interface {
	mustEmbedUnimplementedDoshBankServer()
}

func RegisterDoshBankServer(s grpc.ServiceRegistrar, srv DoshBankServer) {
	s.RegisterService(&DoshBank_ServiceDesc, srv)
}

func _DoshBank_RegistrarEliminacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoshBankServer).RegistrarEliminacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.DoshBank/RegistrarEliminacion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoshBankServer).RegistrarEliminacion(ctx, req.(*RegistroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoshBank_ObtenerMonto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MontoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoshBankServer).ObtenerMonto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.DoshBank/ObtenerMonto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoshBankServer).ObtenerMonto(ctx, req.(*MontoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoshBank_ServiceDesc is the grpc.ServiceDesc for DoshBank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoshBank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission.DoshBank",
	HandlerType: (*DoshBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarEliminacion",
			Handler:    _DoshBank_RegistrarEliminacion_Handler,
		},
		{
			MethodName: "ObtenerMonto",
			Handler:    _DoshBank_ObtenerMonto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mision.proto",
}

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeClient interface {
	RegistrarDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	ObtenerDecision(ctx context.Context, in *ObtenerDecisionRequest, opts ...grpc.CallOption) (*ObtenerDecisionResponse, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) RegistrarDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, "/mission.NameNode/RegistrarDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) ObtenerDecision(ctx context.Context, in *ObtenerDecisionRequest, opts ...grpc.CallOption) (*ObtenerDecisionResponse, error) {
	out := new(ObtenerDecisionResponse)
	err := c.cc.Invoke(ctx, "/mission.NameNode/ObtenerDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServer is the server API for NameNode service.
// All implementations must embed UnimplementedNameNodeServer
// for forward compatibility
type NameNodeServer interface {
	RegistrarDecision(context.Context, *DecisionRequest) (*DecisionResponse, error)
	ObtenerDecision(context.Context, *ObtenerDecisionRequest) (*ObtenerDecisionResponse, error)
	mustEmbedUnimplementedNameNodeServer()
}

// UnimplementedNameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (UnimplementedNameNodeServer) RegistrarDecision(context.Context, *DecisionRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarDecision not implemented")
}
func (UnimplementedNameNodeServer) ObtenerDecision(context.Context, *ObtenerDecisionRequest) (*ObtenerDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerDecision not implemented")
}
func (UnimplementedNameNodeServer) mustEmbedUnimplementedNameNodeServer() {}

// UnsafeNameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServer will
// result in compilation errors.
type UnsafeNameNodeServer interface {
	mustEmbedUnimplementedNameNodeServer()
}

func RegisterNameNodeServer(s grpc.ServiceRegistrar, srv NameNodeServer) {
	s.RegisterService(&NameNode_ServiceDesc, srv)
}

func _NameNode_RegistrarDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).RegistrarDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.NameNode/RegistrarDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).RegistrarDecision(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_ObtenerDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtenerDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).ObtenerDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.NameNode/ObtenerDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).ObtenerDecision(ctx, req.(*ObtenerDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNode_ServiceDesc is the grpc.ServiceDesc for NameNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarDecision",
			Handler:    _NameNode_RegistrarDecision_Handler,
		},
		{
			MethodName: "ObtenerDecision",
			Handler:    _NameNode_ObtenerDecision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mision.proto",
}

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	GuardarDecision(ctx context.Context, in *GuardarDecisionRequest, opts ...grpc.CallOption) (*GuardarDecisionResponse, error)
	ObtenerDecision(ctx context.Context, in *ObtenerDecisionRequest, opts ...grpc.CallOption) (*ObtenerDecisionResponse, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) GuardarDecision(ctx context.Context, in *GuardarDecisionRequest, opts ...grpc.CallOption) (*GuardarDecisionResponse, error) {
	out := new(GuardarDecisionResponse)
	err := c.cc.Invoke(ctx, "/mission.DataNode/GuardarDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) ObtenerDecision(ctx context.Context, in *ObtenerDecisionRequest, opts ...grpc.CallOption) (*ObtenerDecisionResponse, error) {
	out := new(ObtenerDecisionResponse)
	err := c.cc.Invoke(ctx, "/mission.DataNode/ObtenerDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	GuardarDecision(context.Context, *GuardarDecisionRequest) (*GuardarDecisionResponse, error)
	ObtenerDecision(context.Context, *ObtenerDecisionRequest) (*ObtenerDecisionResponse, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) GuardarDecision(context.Context, *GuardarDecisionRequest) (*GuardarDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarDecision not implemented")
}
func (UnimplementedDataNodeServer) ObtenerDecision(context.Context, *ObtenerDecisionRequest) (*ObtenerDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerDecision not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s grpc.ServiceRegistrar, srv DataNodeServer) {
	s.RegisterService(&DataNode_ServiceDesc, srv)
}

func _DataNode_GuardarDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuardarDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GuardarDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.DataNode/GuardarDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GuardarDecision(ctx, req.(*GuardarDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_ObtenerDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtenerDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ObtenerDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mission.DataNode/ObtenerDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ObtenerDecision(ctx, req.(*ObtenerDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_ServiceDesc is the grpc.ServiceDesc for DataNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuardarDecision",
			Handler:    _DataNode_GuardarDecision_Handler,
		},
		{
			MethodName: "ObtenerDecision",
			Handler:    _DataNode_ObtenerDecision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mision.proto",
}
